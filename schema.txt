-- Database Schema -- 

  1. Tables [ RLS Security Enable ]
    - users
      - id (uuid, primary key)
      - name (text, not null)
      - email (text, unique, not null)
      - role (text, not null) [ using enum {'admin','team','user'}]
      - image (text, default: 'user.png')
      - created_at (timestamptz, default: now())
    
    - blogs
      - id (uuid, primary key)
      - writer_id (uuid, foreign key to users.id)
      - image_url (text)
      - title (text)
      - content (text, not null)
      - created_at (timestamptz, default: now())
    
    - events
      - id (uuid, primary key)
      - name (text, not null)
      - post_image (text)
      - description (text)
      - event_time (timestamptz, not null)
      - location (text)
      - created_at (timestamptz, default: now())
    
    - registrations (many-to-many relationship table)
      - id (uuid, primary key)
      - event_id (uuid, foreign key to events.id)
      - user_id (uuid, foreign key to users.id)
      - created_at (timestamptz, default: now())
      - Unique constraint on (event_id, user_id)

    - members
      - id (uuid, primary key)
      - domain (ENUM domain_type, Not Null) [using enum {'Web Dev', 'Video Editing', 'Socials', 'App Dev', 'Cloud & AI', 'Graphics', 'Marketing', 'Management'}]
      - role (text, not null)
      - name (text, not null)
      - user_id (uuid, foreign key to users.id)
      - profile_links (text[])
      - description (text, null)
      - thought (text, null)

created_at (timestamptz, default: now())

  2. Security Policies
    - Users table:
      - User can read all user data [ Reason : Can see other user (admin / team) profile pic ]
      - Admin/team can update/delete user data 
    - Blogs table:
      - Anyone can read blogs
      - Admin/team can create/update/delete blogs
    - Events table:
      - Anyone can read events
      - Admin/team can create/update/delete events
    - Registrations table:
      - Users can read their own registrations
      - Users can register for events
      - Admin can read all registrations
      - Users can read ( see ) all other user registrations [ Reason : Otherwise it doesn't display no. of registrations in events. ]
    - Members table:
      - Anyone can read members
      - Only admins can insert/update/delete members
      - Team Mebers & Admin can update their own data

  3. Functions & Trigger
    - Handle new users:
      - Use to insert new user data in user table 
    - Validate Member User ID:
      - Validates that the user_id in the members table references a user with the role 'team' or 'admin'.

  4. Storage
    - Two Buckets : blogs & profile

-- Important consideration -- 

    - Email Verification [ supabase] : OFF 
    - Realtime : OFF
    - Email Validation : OFF
    - Storage File Name format for bucket blogs is : HHmmss-dd-MM  [ 193022-22-04 for 19:30:22 on February 22 ]

-- Check List --
  - FIX THIS : Admin control -> Admin -> Members : add part ( user_id ) one to many connection 
  - Logs : Team members' changes should be logged
  - Docs for the Entire website  [ Do it at the End ]
  - For Blogs & Events if the team members use different image so write some logic .
  - Model for Members [ Details for each members should be shown. ] - frontend .
  - Dynamic Blog and Event Pages : Implement dynamic pages for blogs [dynamic route ] and events [ model ] using MDX to display individual blog posts and event details.
  - Event Management Dashboard : Basically Admin / team can see the register user data .
  - A live route to display the current upcoming event.
  - Design and implement email templates and redirect URLs in supabase.
  - Specific Team Member Information Popup : Implement a screen to display detailed information about a specific team member.
  - Form Implementation [ Upcoming Plans ]
  - Implement a "Search" feature for blogs and events using openai ( vector supabase ).
  - A Download as PDF feature for blogs.
  - Share Ongoing Event on Social Media : Implement a feature to share ongoing events on social media platforms.
  - AI Implementation to enhance the blog and event text ( content & then -> markdown ) .
  - Chat Bot Implementation : Implement a chatbot to assist users with their queries.
  - User will register in a event through form ( only ).
  - Allow users to download certificates for events they've registered for.
  - Determine when certificates should be created and made available for users.


  - User Event Page Development - Management 
    - User Process Management
      - Users will have a process status:
          - Ongoing
          - Completed
        [ Team and admin can change the process status via a toggle button. ]
    - Database Modifications:
      - Add a Process Column [ Introduce a new column in the registrations table to store the process status. ]
    - Policy Updates:
      - Create policies that allow team and admin to update the registrations table.
    - Event Selection: 
      - Implement a dropdown to select events.
      - Based on selected event show all the users register in that event.
    - Event Status Logic:
      - Determine event status based on time:
        - If event_time + 12 hours > current_time, then the event is ongoing.
        - Otherwise, the event is completed.
      - If an event is completed, the team cannot update the user process [ Implement the  logic in the frontend to ensure proper user experience ]
